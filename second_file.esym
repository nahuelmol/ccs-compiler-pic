D G "__PCM__" 0 28 ""5.091""
D G "__DEVICE__" 0 28 "876"
D G "__DATE__" 0 28 ""13-Dec-20""
D G "__TIME__" 0 28 ""00:43:33""
D G "_UNICODE" 0 28 ""?""
D G "__EVAL" 0 28 ""?"" "Standard Header file for the PIC16F876 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `54 
f B "set_tris_a" 1 37 "void(int8 value)" `53 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `56 
f B "set_tris_b" 1 38 "void(int8 value)" `55 
f N "set_tris_c" 1 39 ""
v L "value" 1 39 "int8" `58 
f B "set_tris_c" 1 39 "void(int8 value)" `57 
f N "get_tris_a" 1 40 ""
f B "get_tris_a" 1 40 "int8()" `59 
f N "get_tris_b" 1 41 ""
f B "get_tris_b" 1 41 "int8()" `60 
f N "get_tris_c" 1 42 ""
f B "get_tris_c" 1 42 "int8()" `61 
f N "output_a" 1 43 ""
v L "value" 1 43 "int8" `63 
f B "output_a" 1 43 "void(int8 value)" `62 
f N "output_b" 1 44 ""
v L "value" 1 44 "int8" `65 
f B "output_b" 1 44 "void(int8 value)" `64 
f N "output_c" 1 45 ""
v L "value" 1 45 "int8" `67 
f B "output_c" 1 45 "void(int8 value)" `66 
f N "input_a" 1 46 ""
f B "input_a" 1 46 "int8()" `68 
f N "input_b" 1 47 ""
f B "input_b" 1 47 "int8()" `69 
f N "input_c" 1 48 ""
f B "input_c" 1 48 "int8()" `70 
f N "input_change_a" 1 49 ""
f B "input_change_a" 1 49 "int8()" `71 
f N "input_change_b" 1 50 ""
f B "input_change_b" 1 50 "int8()" `72 
f N "input_change_c" 1 51 ""
f B "input_change_c" 1 51 "int8()" `73 
f N "port_b_pullups" 1 52 ""
v L "value" 1 52 "int8" `75 
f B "port_b_pullups" 1 52 "void(int8 value)" `74 
f N "input" 1 53 ""
v L "pin" 1 53 "int16" `77 
f B "input" 1 53 "int8(int16 pin)" `76 
f N "input_state" 1 54 ""
v L "pin" 1 54 "int16" `79 
f B "input_state" 1 54 "int8(int16 pin)" `78 
f N "output_low" 1 55 ""
v L "pin" 1 55 "int16" `81 
f B "output_low" 1 55 "void(int16 pin)" `80 
f N "output_high" 1 56 ""
v L "pin" 1 56 "int16" `83 
f B "output_high" 1 56 "void(int16 pin)" `82 
f N "output_toggle" 1 57 ""
v L "pin" 1 57 "int16" `85 
f B "output_toggle" 1 57 "void(int16 pin)" `84 
f N "output_bit" 1 58 ""
v L "pin" 1 58 "int16" `87 
v L "level" 1 58 "int8" `88 
f B "output_bit" 1 58 "void(int16 pin,int8 level)" `86 
f N "output_float" 1 59 ""
v L "pin" 1 59 "int16" `90 
f B "output_float" 1 59 "void(int16 pin)" `89 
f N "output_drive" 1 60 ""
v L "pin" 1 60 "int16" `92 
f B "output_drive" 1 60 "void(int16 pin)" `91  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 64 "40"
d G "PIN_A1" 1 65 "41"
d G "PIN_A2" 1 66 "42"
d G "PIN_A3" 1 67 "43"
d G "PIN_A4" 1 68 "44"
d G "PIN_A5" 1 69 "45"
d G "PIN_B0" 1 71 "48"
d G "PIN_B1" 1 72 "49"
d G "PIN_B2" 1 73 "50"
d G "PIN_B3" 1 74 "51"
d G "PIN_B4" 1 75 "52"
d G "PIN_B5" 1 76 "53"
d G "PIN_B6" 1 77 "54"
d G "PIN_B7" 1 78 "55"
d G "PIN_C0" 1 80 "56"
d G "PIN_C1" 1 81 "57"
d G "PIN_C2" 1 82 "58"
d G "PIN_C3" 1 83 "59"
d G "PIN_C4" 1 84 "60"
d G "PIN_C5" 1 85 "61"
d G "PIN_C6" 1 86 "62"
d G "PIN_C7" 1 87 "63"
d G "FALSE" 1 90 "0"
d G "TRUE" 1 91 "1"
d G "BYTE" 1 93 "int8"
d G "BOOLEAN" 1 94 "int1"
d G "getc" 1 96 "getch"
d G "fgetc" 1 97 "getch"
d G "getchar" 1 98 "getch"
d G "putc" 1 99 "putchar"
d G "fputc" 1 100 "putchar"
d G "fgets" 1 101 "gets"
d G "fputs" 1 102 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 107 ""
f B "restart_cause" 1 107 "int8()" `93 
f N "reset_cpu" 1 108 ""
f B "reset_cpu" 1 108 "void()" `94 
f N "sleep" 1 109 ""
f B "sleep" 1 109 "void()" `95  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 111 "3"
d G "WDT_TIMEOUT" 1 112 "11"
d G "MCLR_FROM_SLEEP" 1 113 "19"
d G "MCLR_FROM_RUN" 1 114 "27"
d G "NORMAL_POWER_UP" 1 115 "25"
d G "BROWNOUT_RESTART" 1 116 "26"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 123 ""
v L "mode" 1 123 "int8" `97 
f B "setup_timer_0" 1 123 "void(int8 mode)" `96 
f N "set_timer0" 1 124 ""
v L "value" 1 124 "int8" `99 
f B "set_timer0" 1 124 "void(int8 value)" `98 
f N "get_timer0" 1 125 ""
f B "get_timer0" 1 125 "int8()" `100 
f N "setup_counters" 1 126 ""
v L "mode" 1 126 "int8" `102 
v L "prescaler" 1 126 "int8" `103 
f B "setup_counters" 1 126 "void(int8 mode,int8 prescaler)" `101 
f N "set_rtcc" 1 127 ""
v L "value" 1 127 "int8" `105 
f B "set_rtcc" 1 127 "void(int8 value)" `104 
f N "get_rtcc" 1 128 ""
f B "get_rtcc" 1 128 "int8()" `106  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 130 "0"
d G "T0_EXT_L_TO_H" 1 131 "32"
d G "T0_EXT_H_TO_L" 1 132 "48"
d G "T0_DIV_1" 1 134 "8"
d G "T0_DIV_2" 1 135 "0"
d G "T0_DIV_4" 1 136 "1"
d G "T0_DIV_8" 1 137 "2"
d G "T0_DIV_16" 1 138 "3"
d G "T0_DIV_32" 1 139 "4"
d G "T0_DIV_64" 1 140 "5"
d G "T0_DIV_128" 1 141 "6"
d G "T0_DIV_256" 1 142 "7"
d G "T0_8_BIT" 1 145 "0"
d G "RTCC_INTERNAL" 1 149 "0"
d G "RTCC_EXT_L_TO_H" 1 150 "32"
d G "RTCC_EXT_H_TO_L" 1 151 "48"
d G "RTCC_DIV_1" 1 152 "8"
d G "RTCC_DIV_2" 1 153 "0"
d G "RTCC_DIV_4" 1 154 "1"
d G "RTCC_DIV_8" 1 155 "2"
d G "RTCC_DIV_16" 1 156 "3"
d G "RTCC_DIV_32" 1 157 "4"
d G "RTCC_DIV_64" 1 158 "5"
d G "RTCC_DIV_128" 1 159 "6"
d G "RTCC_DIV_256" 1 160 "7"
d G "RTCC_8_BIT" 1 161 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 172 ""
v L "mode" 1 172 "int16" `108 
f B "setup_wdt" 1 172 "void(int16 mode)" `107 
f N "restart_wdt" 1 173 ""
f B "restart_wdt" 1 173 "void()" `109  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 176 "8"
d G "WDT_36MS" 1 177 "9"
d G "WDT_72MS" 1 178 "10"
d G "WDT_144MS" 1 179 "11"
d G "WDT_288MS" 1 180 "12"
d G "WDT_576MS" 1 181 "13"
d G "WDT_1152MS" 1 182 "14"
d G "WDT_2304MS" 1 183 "15"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 189 ""
v L "mode" 1 189 "int16" `111 
f B "setup_timer_1" 1 189 "void(int16 mode)" `110 
f N "get_timer1" 1 190 ""
f B "get_timer1" 1 190 "int16()" `112 
f N "set_timer1" 1 191 ""
v L "value" 1 191 "int16" `114 
f B "set_timer1" 1 191 "void(int16 value)" `113  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 194 "0"
d G "T1_INTERNAL" 1 195 "0x85"
d G "T1_EXTERNAL" 1 196 "0x87"
d G "T1_EXTERNAL_SYNC" 1 197 "0x83"
d G "T1_CLK_OUT" 1 199 "8"
d G "T1_DIV_BY_1" 1 201 "0"
d G "T1_DIV_BY_2" 1 202 "0x10"
d G "T1_DIV_BY_4" 1 203 "0x20"
d G "T1_DIV_BY_8" 1 204 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 209 ""
v L "mode" 1 209 "int8" `116 
v L "period" 1 209 "int8" `117 
v L "postscale" 1 209 "int8" `118 
f B "setup_timer_2" 1 209 "void(int8 mode,int8 period,int8 postscale)" `115 
f N "get_timer2" 1 210 ""
f B "get_timer2" 1 210 "int8()" `119 
f N "set_timer2" 1 211 ""
v L "value" 1 211 "int8" `121 
f B "set_timer2" 1 211 "void(int8 value)" `120  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 213 "0"
d G "T2_DIV_BY_1" 1 214 "4"
d G "T2_DIV_BY_4" 1 215 "5"
d G "T2_DIV_BY_16" 1 216 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 222 ""
v L "mode" 1 222 "int32" `123 
f B "setup_ccp1" 1 222 "void(int32 mode)" `122 
f N "setup_ccp1" 1 223 ""
v L "mode" 1 223 "int32" `125 
v L "pwm" 1 223 "int8" `126 
f B "setup_ccp1" 1 223 "void(int32 mode,int8 pwm)" `124 
f N "set_pwm1_duty" 1 224 ""
v L "value" 1 224 "int8" `128 
f B "set_pwm1_duty" 1 224 "void(int8 value)" `127 
f N "set_pwm1_duty" 1 225 ""
v L "value" 1 225 "int16" `130 
f B "set_pwm1_duty" 1 225 "void(int16 value)" `129  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 227 "0"
d G "CCP_CAPTURE_FE" 1 228 "0x04"
d G "CCP_CAPTURE_RE" 1 229 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 230 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 231 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 232 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 233 "0x09"
d G "CCP_COMPARE_INT" 1 234 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 235 "0x0B"
d G "CCP_PWM" 1 236 "0x0C"
d G "CCP_PWM_PLUS_1" 1 237 "0x1c"
d G "CCP_PWM_PLUS_2" 1 238 "0x2c"
d G "CCP_PWM_PLUS_3" 1 239 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 246 ""
v L "mode" 1 246 "int32" `135 
f B "setup_ccp2" 1 246 "void(int32 mode)" `134 
f N "setup_ccp2" 1 247 ""
v L "mode" 1 247 "int32" `137 
v L "pwm" 1 247 "int8" `138 
f B "setup_ccp2" 1 247 "void(int32 mode,int8 pwm)" `136 
f N "set_pwm2_duty" 1 248 ""
v L "value" 1 248 "int8" `140 
f B "set_pwm2_duty" 1 248 "void(int8 value)" `139 
f N "set_pwm2_duty" 1 249 ""
v L "value" 1 249 "int16" `142 
f B "set_pwm2_duty" 1 249 "void(int16 value)" `141 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 257 ""
v L "mode" 1 257 "int32" `147 
f B "setup_spi" 1 257 "void(int32 mode)" `146 
f N "spi_write" 1 258 ""
v L "value" 1 258 "int8" `149 
f B "spi_write" 1 258 "void(int8 value)" `148 
f N "spi_write" 1 259 ""
v L "wait" 1 259 "int8" `151 
v L "value" 1 259 "int8" `152 
f B "spi_write" 1 259 "void(int8 wait,int8 value)" `150 
f N "spi_read" 1 260 ""
f B "spi_read" 1 260 "int8()" `153 
f N "spi_read" 1 261 ""
v L "value" 1 261 "int8" `155 
f B "spi_read" 1 261 "int8(int8 value)" `154 
f N "spi_data_is_in" 1 262 ""
f B "spi_data_is_in" 1 262 "int8()" `156  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 264 "0x00"
d G "SPI_MASTER" 1 265 "0x20"
d G "SPI_SLAVE" 1 266 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 267 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 268 "0x00"
d G "SPI_CLK_DIV_4" 1 269 "0x00"
d G "SPI_CLK_DIV_16" 1 270 "0x01"
d G "SPI_CLK_DIV_64" 1 271 "0x02"
d G "SPI_CLK_T2" 1 272 "0x03"
d G "SPI_SS_DISABLED" 1 273 "0x01"
d G "SPI_XMIT_L_TO_H" 1 275 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 276 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 278 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 279 "0x8000"
d G "SPI_L_TO_H" 1 282 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 283 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 1 3 2 "FUNCTION"
f N "setup_uart" 1 287 ""
v L "baud" 1 287 "int32" `158 
f B "setup_uart" 1 287 "void(int32 baud)" `157 
f N "setup_uart" 1 288 ""
v L "baud" 1 288 "int32" `160 
v L "stream" 1 288 "int8" `161 
f B "setup_uart" 1 288 "void(int32 baud,int8 stream)" `159 
f N "setup_uart" 1 289 ""
v L "baud" 1 289 "int32" `163 
v L "stream" 1 289 "int8" `164 
v L "clock" 1 289 "int32" `165 
f B "setup_uart" 1 289 "void(int32 baud,int8 stream,int32 clock)" `162 
f N "set_uart_speed" 1 290 ""
v L "baud" 1 290 "int32" `167 
f B "set_uart_speed" 1 290 "void(int32 baud)" `166 
f N "set_uart_speed" 1 291 ""
v L "baud" 1 291 "int32" `169 
v L "stream" 1 291 "int8" `170 
f B "set_uart_speed" 1 291 "void(int32 baud,int8 stream)" `168 
f N "set_uart_speed" 1 292 ""
v L "baud" 1 292 "int32" `172 
v L "stream" 1 292 "int8" `173 
v L "clock" 1 292 "int32" `174 
f B "set_uart_speed" 1 292 "void(int32 baud,int8 stream,int32 clock)" `171  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 296 "2"
d G "UART_DATA" 1 297 "4"
c L "set_uart_speed" 1 3 4 "FUNCTION"
f N "setup_adc" 1 304 ""
v L "mode" 1 304 "int16" `176 
f B "setup_adc" 1 304 "void(int16 mode)" `175 
f N "read_adc" 1 305 ""
f B "read_adc" 1 305 "int8()" `177 
f N "read_adc" 1 306 ""
v L "mode" 1 306 "int8" `179 
f B "read_adc" 1 306 "int8(int8 mode)" `178 
f N "read_adc" 1 307 ""
f G "read_adc" 1 307 "int16()" `180 
f N "read_adc" 1 308 ""
v L "mode" 1 308 "int8" `181 
f G "read_adc" 1 308 "int16(int8 mode,int8 setting)" `180 
f N "adc_done" 1 309 ""
f B "adc_done" 1 309 "int8(int8 mode,int8 setting)" `180  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 311 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 312 "0x100"
d G "ADC_CLOCK_DIV_8" 1 313 "0x40"
d G "ADC_CLOCK_DIV_32" 1 314 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 315 "0xc0" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 318 ""
v L "setting" 1 318 "int8" `182 
f B "setup_adc_ports" 1 318 "void(int8 setting)" `181 
f N "set_analog_pins" 1 319 ""
v L "setting" 1 319 "int8" `184 
f B "set_analog_pins" 1 319 "void(int8 setting)" `183 
f N "set_adc_channel" 1 320 ""
v L "channel" 1 320 "int8" `186 
f B "set_adc_channel" 1 320 "void(int8 channel)" `185  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 322 "7" "None"
d G "ALL_ANALOG" 1 323 "0" "A0 A1 A2 A3 A4"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 324 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 325 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 326 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_VREF_VREF" 1 327 "0x08" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 328 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 329 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 330 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 331 "0x1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 332 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 333 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 334 "0x8" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 335 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 336 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 337 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 340 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 341 "1"
d G "ADC_READ_ONLY" 1 342 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 348 ""
v L "x" 1 348 "sint8" `188 
f B "abs" 1 348 "sint8(sint8 x)" `187 
f N "abs" 1 349 ""
v L "x" 1 349 "sint16" `190 
f B "abs" 1 349 "sint16(sint16 x)" `189 
f N "abs" 1 350 ""
v L "x" 1 350 "sint32" `192 
f B "abs" 1 350 "sint32(sint32 x)" `191 
f N "abs" 1 351 ""
v L "x" 1 351 "float" `194 
f B "abs" 1 351 "float(float x)" `193 
f N "_mul" 1 352 ""
v L "??65535" 1 352 "int8" `196 
v L "??65535" 1 352 "int8" `197 
f B "_mul" 1 352 "int16(int8 ,int8 )" `195 
f N "_mul" 1 353 ""
v L "??65535" 1 353 "sint8" `199 
v L "??65535" 1 353 "sint8" `200 
f B "_mul" 1 353 "sint16(sint8 ,sint8 )" `198 
f N "_mul" 1 354 ""
v L "??65535" 1 354 "int16" `202 
v L "??65535" 1 354 "int16" `203 
f B "_mul" 1 354 "int32(int16 ,int16 )" `201 
f N "_mul" 1 355 ""
v L "??65535" 1 355 "sint16" `205 
v L "??65535" 1 355 "sint16" `206 
f B "_mul" 1 355 "sint32(sint16 ,sint16 )" `204  "Memory Manipulation Prototypes:"
f N "read_bank" 1 358 ""
v L "bank" 1 358 "int8" `208 
v L "offset" 1 358 "int8" `209 
f B "read_bank" 1 358 "int8(int8 bank,int8 offset)" `207 
f N "write_bank" 1 359 ""
v L "bank" 1 359 "int8" `211 
v L "offset" 1 359 "int8" `212 
v L "value" 1 359 "int8" `213 
f B "write_bank" 1 359 "void(int8 bank,int8 offset,int8 value)" `210 
f N "strcpy" 1 360 ""
v L "dest" 1 360 "*int8" `215 
v L "src" 1 360 "*int8" `216 
f B "strcpy" 1 360 "void(*int8 dest,*int8 src)" `214 
f N "memset" 1 361 ""
v L "destination" 1 361 "*int8" `218 
v L "value" 1 361 "int8" `219 
v L "num" 1 361 "int16" `220 
f B "memset" 1 361 "void(*int8 destination,int8 value,int16 num)" `217 
f N "memcpy" 1 362 ""
v L "destination" 1 362 "*int8" `222 
v L "source" 1 362 "*int8" `223 
v L "num" 1 362 "int16" `224 
f B "memcpy" 1 362 "void(*int8 destination,*int8 source,int16 num)" `221  "String Prototypes:"
f N "toupper" 1 365 ""
v L "cvalue" 1 365 "int8" `226 
f B "toupper" 1 365 "int8(int8 cvalue)" `225 
f N "tolower" 1 366 ""
v L "cvalue" 1 366 "int8" `228 
f B "tolower" 1 366 "int8(int8 cvalue)" `227 
f N "sprintf" 1 367 ""
v L "string" 1 367 "*int8" `230 
v L "cstring" 1 367 "*int8" `231 
f B "sprintf" 1 367 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `229  "Data Manipulators Prototypes:"
f N "shift_left" 1 370 ""
v L "address" 1 370 "*int8" `234 
v L "bytes" 1 370 "int8" `235 
v L "value" 1 370 "int8" `236 
f B "shift_left" 1 370 "int8(*int8 address,int8 bytes,int8 value)" `233 
f N "shift_right" 1 371 ""
v L "address" 1 371 "*int8" `238 
v L "bytes" 1 371 "int8" `239 
v L "value" 1 371 "int8" `240 
f B "shift_right" 1 371 "int8(*int8 address,int8 bytes,int8 value)" `237 
f N "rotate_left" 1 372 ""
v L "address" 1 372 "*int8" `242 
v L "bytes" 1 372 "int8" `243 
f B "rotate_left" 1 372 "void(*int8 address,int8 bytes)" `241 
f N "rotate_right" 1 373 ""
v L "address" 1 373 "*int8" `245 
v L "bytes" 1 373 "int8" `246 
f B "rotate_right" 1 373 "void(*int8 address,int8 bytes)" `244 
f N "swap" 1 374 ""
v L "value" 1 374 "int8" `248 
f B "swap" 1 374 "void(int8 value)" `247 
f N "make8" 1 375 ""
v L "var" 1 375 "int16" `250 
v L "offset" 1 375 "int8" `251 
f B "make8" 1 375 "int8(int16 var,int8 offset)" `249 
f N "make8" 1 376 ""
v L "var" 1 376 "int32" `253 
v L "offset" 1 376 "int8" `254 
f B "make8" 1 376 "int8(int32 var,int8 offset)" `252 
f N "make16" 1 377 ""
v L "varhigh" 1 377 "int8" `256 
v L "varlow" 1 377 "int8" `257 
f B "make16" 1 377 "int16(int8 varhigh,int8 varlow)" `255 
f N "make32" 1 378 ""
v L "var1" 1 378 "int16" `259 
f B "make32" 1 378 "int32(int16 var1)" `258 
f N "make32" 1 379 ""
v L "var1" 1 379 "int16" `261 
v L "var2" 1 379 "int16" `262 
f B "make32" 1 379 "int32(int16 var1,int16 var2)" `260 
f N "make32" 1 380 ""
v L "var1" 1 380 "int16" `264 
v L "var2" 1 380 "int8" `265 
f B "make32" 1 380 "int32(int16 var1,int8 var2)" `263 
f N "make32" 1 381 ""
v L "var1" 1 381 "int16" `267 
v L "var2" 1 381 "int8" `268 
v L "var3" 1 381 "int8" `269 
f B "make32" 1 381 "int32(int16 var1,int8 var2,int8 var3)" `266 
f N "make32" 1 382 ""
v L "var1" 1 382 "int8" `271 
f B "make32" 1 382 "int32(int8 var1)" `270 
f N "make32" 1 383 ""
v L "var1" 1 383 "int8" `273 
v L "var2" 1 383 "int8" `274 
f B "make32" 1 383 "int32(int8 var1,int8 var2)" `272 
f N "make32" 1 384 ""
v L "var1" 1 384 "int8" `276 
v L "var2" 1 384 "int8" `277 
v L "var3" 1 384 "int8" `278 
f B "make32" 1 384 "int32(int8 var1,int8 var2,int8 var3)" `275 
f N "make32" 1 385 ""
v L "var1" 1 385 "int8" `280 
v L "var2" 1 385 "int8" `281 
v L "var3" 1 385 "int8" `282 
v L "var4" 1 385 "int8" `283 
f B "make32" 1 385 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `279 
f N "make32" 1 386 ""
v L "var1" 1 386 "int8" `285 
v L "var2" 1 386 "int16" `286 
f B "make32" 1 386 "int32(int8 var1,int16 var2)" `284 
f N "make32" 1 387 ""
v L "var1" 1 387 "int8" `288 
v L "var2" 1 387 "int16" `289 
v L "var3" 1 387 "int8" `290 
f B "make32" 1 387 "int32(int8 var1,int16 var2,int8 var3)" `287 
f N "make32" 1 388 ""
v L "var1" 1 388 "int8" `292 
v L "var2" 1 388 "int8" `293 
v L "var3" 1 388 "int16" `294 
f B "make32" 1 388 "int32(int8 var1,int8 var2,int16 var3)" `291 
f N "bit_set" 1 389 ""
v L "var" 1 389 "int8" `296 
v L "bit" 1 389 "int8" `297 
f B "bit_set" 1 389 "void(int8 var,int8 bit)" `295 
f N "bit_set" 1 390 ""
v L "var" 1 390 "int16" `299 
v L "bit" 1 390 "int8" `300 
f B "bit_set" 1 390 "void(int16 var,int8 bit)" `298 
f N "bit_set" 1 391 ""
v L "var" 1 391 "int32" `302 
v L "bit" 1 391 "int8" `303 
f B "bit_set" 1 391 "void(int32 var,int8 bit)" `301 
f N "bit_clear" 1 392 ""
v L "var" 1 392 "int8" `305 
v L "bit" 1 392 "int8" `306 
f B "bit_clear" 1 392 "void(int8 var,int8 bit)" `304 
f N "bit_clear" 1 393 ""
v L "var" 1 393 "int16" `308 
v L "bit" 1 393 "int8" `309 
f B "bit_clear" 1 393 "void(int16 var,int8 bit)" `307 
f N "bit_clear" 1 394 ""
v L "var" 1 394 "int32" `311 
v L "bit" 1 394 "int8" `312 
f B "bit_clear" 1 394 "void(int32 var,int8 bit)" `310 
f N "bit_test" 1 395 ""
v L "var" 1 395 "int8" `314 
v L "bit" 1 395 "int8" `315 
f B "bit_test" 1 395 "int8(int8 var,int8 bit)" `313 
f N "bit_test" 1 396 ""
v L "var" 1 396 "int16" `317 
v L "bit" 1 396 "int8" `318 
f B "bit_test" 1 396 "int8(int16 var,int8 bit)" `316 
f N "bit_test" 1 397 ""
v L "var" 1 397 "int32" `320 
v L "bit" 1 397 "int8" `321 
f B "bit_test" 1 397 "int8(int32 var,int8 bit)" `319  "#use delay() Prototypes:"
f N "delay_cycles" 1 400 ""
v L "count" 1 400 "int8" `323 
f B "delay_cycles" 1 400 "void(int8 count)" `322 
f N "delay_ms" 1 401 ""
v L "time" 1 401 "int16" `325 
f B "delay_ms" 1 401 "void(int16 time)" `324 
f N "delay_us" 1 402 ""
v L "time" 1 402 "int16" `327 
f B "delay_us" 1 402 "void(int16 time)" `326  "#use rs232() Prototypes:"
f N "putchar" 1 405 ""
v L "cdata" 1 405 "int8" `329 
f B "putchar" 1 405 "void(int8 cdata)" `328 
f N "putchar" 1 406 ""
v L "cdata" 1 406 "int8" `331 
v L "stream" 1 406 "int8" `332 
f B "putchar" 1 406 "void(int8 cdata,int8 stream)" `330 
f N "puts" 1 407 ""
v L "string" 1 407 "*int8" `334 
f B "puts" 1 407 "void(*int8 string)" `333 
f N "puts" 1 408 ""
v L "string" 1 408 "*int8" `336 
v L "stream" 1 408 "int8" `337 
f B "puts" 1 408 "void(*int8 string,int8 stream)" `335 
f N "getch" 1 409 ""
f B "getch" 1 409 "int8()" `338 
f N "getch" 1 410 ""
v L "stream" 1 410 "int8" `340 
f B "getch" 1 410 "int8(int8 stream)" `339 
f N "gets" 1 411 ""
v L "string" 1 411 "*int8" `342 
f B "gets" 1 411 "void(*int8 string)" `341 
f N "gets" 1 412 ""
v L "string" 1 412 "*int8" `344 
v L "stream" 1 412 "int8" `345 
f B "gets" 1 412 "void(*int8 string,int8 stream)" `343 
f N "kbhit" 1 413 ""
f B "kbhit" 1 413 "int8()" `346 
f N "kbhit" 1 414 ""
v L "stream" 1 414 "int8" `348 
f B "kbhit" 1 414 "int8(int8 stream)" `347 
f N "printf" 1 415 ""
v L "string" 1 415 "*int8" `350 
f B "printf" 1 415 "void(*int8 string,*int8 _VA_LIST)" `349 
f N "fprintf" 1 416 ""
v L "stream" 1 416 "int8" `353 
v L "string" 1 416 "*int8" `354 
f B "fprintf" 1 416 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `352 
f N "putc_send" 1 417 ""
f B "putc_send" 1 417 "void()" `356 
f N "fputc_send" 1 418 ""
v L "stream" 1 418 "int8" `358 
f B "fputc_send" 1 418 "void(int8 stream)" `357 
f N "rcv_buffer_full" 1 419 ""
f B "rcv_buffer_full" 1 419 "int8()" `359 
f N "rcv_buffer_full" 1 420 ""
v L "stream" 1 420 "int8" `361 
f B "rcv_buffer_full" 1 420 "int8(int8 stream)" `360 
f N "rcv_buffer_bytes" 1 421 ""
f B "rcv_buffer_bytes" 1 421 "int16()" `362 
f N "rcv_buffer_bytes" 1 422 ""
v L "stream" 1 422 "int8" `364 
f B "rcv_buffer_bytes" 1 422 "int16(int8 stream)" `363 
f N "tx_buffer_full" 1 423 ""
f B "tx_buffer_full" 1 423 "int8()" `365 
f N "tx_buffer_full" 1 424 ""
v L "stream" 1 424 "int8" `367 
f B "tx_buffer_full" 1 424 "int8(int8 stream)" `366 
f N "tx_buffer_bytes" 1 425 ""
f B "tx_buffer_bytes" 1 425 "int16()" `368 
f N "tx_buffer_bytes" 1 426 ""
v L "stream" 1 426 "int8" `370 
f B "tx_buffer_bytes" 1 426 "int16(int8 stream)" `369  "#use i2c() Prototypes:"
f N "i2c_read" 1 429 ""
f B "i2c_read" 1 429 "int8()" `371 
f N "i2c_read" 1 430 ""
v L "ack" 1 430 "int8" `373 
f B "i2c_read" 1 430 "int8(int8 ack)" `372 
f N "i2c_read" 1 431 ""
v L "stream" 1 431 "int8" `375 
v L "ack" 1 431 "int8" `376 
f B "i2c_read" 1 431 "int8(int8 stream,int8 ack)" `374 
f N "i2c_write" 1 432 ""
v L "data" 1 432 "int8" `378 
f B "i2c_write" 1 432 "int8(int8 data)" `377 
f N "i2c_write" 1 433 ""
v L "stream" 1 433 "int8" `380 
v L "data" 1 433 "int8" `381 
f B "i2c_write" 1 433 "int8(int8 stream,int8 data)" `379 
f N "i2c_start" 1 434 ""
f B "i2c_start" 1 434 "void()" `382 
f N "i2c_start" 1 435 ""
v L "stream" 1 435 "int8" `384 
f B "i2c_start" 1 435 "void(int8 stream)" `383 
f N "i2c_start" 1 436 ""
v L "stream" 1 436 "int8" `386 
v L "restart" 1 436 "int8" `387 
f B "i2c_start" 1 436 "void(int8 stream,int8 restart)" `385 
f N "i2c_stop" 1 437 ""
f B "i2c_stop" 1 437 "void()" `388 
f N "i2c_stop" 1 438 ""
v L "stream" 1 438 "int8" `390 
f B "i2c_stop" 1 438 "void(int8 stream)" `389 
f N "i2c_isr_state" 1 439 ""
f B "i2c_isr_state" 1 439 "int8()" `391 
f N "i2c_slaveaddr" 1 440 ""
v L "addr" 1 440 "int8" `393 
f B "i2c_slaveaddr" 1 440 "void(int8 addr)" `392 
f N "i2c_slaveaddr" 1 441 ""
v L "stream" 1 441 "int8" `395 
v L "addr" 1 441 "int8" `396 
f B "i2c_slaveaddr" 1 441 "void(int8 stream,int8 addr)" `394 
f N "i2c_poll" 1 442 ""
f B "i2c_poll" 1 442 "int8()" `397 
f N "i2c_poll" 1 443 ""
v L "stream" 1 443 "int8" `399 
f B "i2c_poll" 1 443 "int8(int8 stream)" `398 
f N "i2c_init" 1 444 ""
v L "baud" 1 444 "int32" `401 
f B "i2c_init" 1 444 "void(int32 baud)" `400 
f N "i2c_init" 1 445 ""
v L "stream" 1 445 "int8" `403 
v L "baud" 1 445 "int32" `404 
f B "i2c_init" 1 445 "void(int8 stream,int32 baud)" `402 
f N "i2c_transfer" 1 446 ""
v L "address" 1 446 "int8" `406 
v L "wData" 1 446 "*int8" `407 
v L "wCount" 1 446 "int8" `408 
f B "i2c_transfer" 1 446 "int8(int8 address,*int8 wData,int8 wCount)" `405 
f N "i2c_transfer" 1 447 ""
v L "address" 1 447 "int8" `410 
v L "wData" 1 447 "*int8" `411 
v L "wCount" 1 447 "int8" `412 
v L "rData" 1 447 "*int8" `413 
v L "rCount" 1 447 "*int8" `414 
f B "i2c_transfer" 1 447 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `409 
f N "i2c_transfer" 1 448 ""
v L "stream" 1 448 "int8" `416 
v L "address" 1 448 "int8" `417 
v L "wData" 1 448 "*int8" `418 
v L "wCount" 1 448 "int8" `419 
f B "i2c_transfer" 1 448 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `415 
f N "i2c_transfer" 1 449 ""
v L "stream" 1 449 "int8" `421 
v L "address" 1 449 "int8" `422 
v L "wData" 1 449 "*int8" `423 
v L "wCount" 1 449 "int8" `424 
v L "rData" 1 449 "*int8" `425 
v L "rCount" 1 449 "*int8" `426 
f B "i2c_transfer" 1 449 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `420 
f N "i2c_transfer_out" 1 450 ""
v L "address" 1 450 "int8" `428 
v L "wData" 1 450 "*int8" `429 
v L "wCount" 1 450 "int8" `430 
f B "i2c_transfer_out" 1 450 "int8(int8 address,*int8 wData,int8 wCount)" `427 
f N "i2c_transfer_out" 1 451 ""
v L "stream" 1 451 "int8" `432 
v L "address" 1 451 "int8" `433 
v L "wData" 1 451 "*int8" `434 
v L "wCount" 1 451 "int8" `435 
f B "i2c_transfer_out" 1 451 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `431 
f N "i2c_transfer_in" 1 452 ""
v L "address" 1 452 "int8" `437 
v L "rData" 1 452 "*int8" `438 
v L "rCount" 1 452 "int8" `439 
f B "i2c_transfer_in" 1 452 "int8(int8 address,*int8 rData,int8 rCount)" `436 
f N "i2c_transfer_in" 1 453 ""
v L "stream" 1 453 "int8" `441 
v L "address" 1 453 "int8" `442 
v L "rData" 1 453 "*int8" `443 
v L "rCount" 1 453 "int8" `444 
f B "i2c_transfer_in" 1 453 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `440  "#use spi() Prototypes:"
f N "spi_xfer" 1 456 ""
f B "spi_xfer" 1 456 "int8()" `445 
f N "spi_xfer" 1 457 ""
f G "spi_xfer" 1 457 "int16(int8 data)" `446 
f N "spi_xfer" 1 458 ""
f G "spi_xfer" 1 458 "int32(int8 data)" `446 
f N "spi_xfer" 1 459 ""
v L "data" 1 459 "int8" `447 
f B "spi_xfer" 1 459 "int8(int8 data)" `446 
f N "spi_xfer" 1 460 ""
v L "data" 1 460 "int16" `449 
f B "spi_xfer" 1 460 "int16(int16 data)" `448 
f N "spi_xfer" 1 461 ""
v L "data" 1 461 "int32" `451 
f B "spi_xfer" 1 461 "int32(int32 data)" `450 
f N "spi_xfer" 1 462 ""
v L "stream" 1 462 "int8" `453 
v L "data" 1 462 "int8" `454 
f B "spi_xfer" 1 462 "int8(int8 stream,int8 data)" `452 
f N "spi_xfer" 1 463 ""
v L "stream" 1 463 "int8" `456 
v L "data" 1 463 "int16" `457 
f B "spi_xfer" 1 463 "int16(int8 stream,int16 data)" `455 
f N "spi_xfer" 1 464 ""
v L "stream" 1 464 "int8" `459 
v L "data" 1 464 "int32" `460 
f B "spi_xfer" 1 464 "int32(int8 stream,int32 data)" `458 
f N "spi_xfer" 1 465 ""
v L "stream" 1 465 "int8" `462 
v L "data" 1 465 "int8" `463 
v L "bits" 1 465 "int8" `464 
f B "spi_xfer" 1 465 "int8(int8 stream,int8 data,int8 bits)" `461 
f N "spi_xfer" 1 466 ""
v L "stream" 1 466 "int8" `466 
v L "data" 1 466 "int16" `467 
v L "bits" 1 466 "int8" `468 
f B "spi_xfer" 1 466 "int16(int8 stream,int16 data,int8 bits)" `465 
f N "spi_xfer" 1 467 ""
v L "stream" 1 467 "int8" `470 
v L "data" 1 467 "int32" `471 
v L "bits" 1 467 "int8" `472 
f B "spi_xfer" 1 467 "int32(int8 stream,int32 data,int8 bits)" `469 
f N "spi_init" 1 468 ""
v L "baud" 1 468 "int32" `474 
f B "spi_init" 1 468 "void(int32 baud)" `473 
f N "spi_init" 1 469 ""
v L "stream" 1 469 "int8" `476 
v L "baud" 1 469 "int32" `477 
f B "spi_init" 1 469 "void(int8 stream,int32 baud)" `475 
f N "spi_speed" 1 470 ""
v L "baud" 1 470 "int32" `479 
f B "spi_speed" 1 470 "void(int32 baud)" `478 
f N "spi_speed" 1 471 ""
v L "stream" 1 471 "int8" `481 
v L "baud" 1 471 "int32" `482 
f B "spi_speed" 1 471 "void(int8 stream,int32 baud)" `480 
f N "spi_speed" 1 472 ""
v L "stream" 1 472 "int8" `484 
v L "baud" 1 472 "int32" `485 
v L "clock" 1 472 "int32" `486 
f B "spi_speed" 1 472 "void(int8 stream,int32 baud,int32 clock)" `483 
f N "spi_prewrite" 1 473 ""
v L "data" 1 473 "int8" `488 
f B "spi_prewrite" 1 473 "void(int8 data)" `487 
f N "spi_prewrite" 1 474 ""
v L "data" 1 474 "int16" `490 
f B "spi_prewrite" 1 474 "void(int16 data)" `489 
f N "spi_prewrite" 1 475 ""
v L "data" 1 475 "int32" `492 
f B "spi_prewrite" 1 475 "void(int32 data)" `491 
f N "spi_prewrite" 1 476 ""
v L "??65535" 1 476 "int8" `494 
v L "data" 1 476 "int8" `495 
f B "spi_prewrite" 1 476 "void(int8 ,int8 data)" `493 
f N "spi_prewrite" 1 477 ""
v L "??65535" 1 477 "int8" `497 
v L "data" 1 477 "int16" `498 
f B "spi_prewrite" 1 477 "void(int8 ,int16 data)" `496 
f N "spi_prewrite" 1 478 ""
v L "??65535" 1 478 "int8" `500 
v L "data" 1 478 "int32" `501 
f B "spi_prewrite" 1 478 "void(int8 ,int32 data)" `499 
f N "spi_xfer_in" 1 479 ""
f B "spi_xfer_in" 1 479 "int8()" `502 
f N "spi_xfer_in" 1 480 ""
f G "spi_xfer_in" 1 480 "int16(int8 bits)" `503 
f N "spi_xfer_in" 1 481 ""
f G "spi_xfer_in" 1 481 "int32(int8 bits)" `503 
f N "spi_xfer_in" 1 482 ""
v L "bits" 1 482 "int8" `504 
f B "spi_xfer_in" 1 482 "int8(int8 bits)" `503 
f N "spi_xfer_in" 1 483 ""
v L "bits" 1 483 "int8" `506 
f G "spi_xfer_in" 1 483 "int16(int8 bits,int8 bits)" `505 
f N "spi_xfer_in" 1 484 ""
v L "bits" 1 484 "int8" `506 
f G "spi_xfer_in" 1 484 "int32(int8 bits,int8 bits)" `505 
f N "spi_xfer_in" 1 485 ""
v L "stream" 1 485 "int8" `506 
v L "bits" 1 485 "int8" `507 
f B "spi_xfer_in" 1 485 "int8(int8 stream,int8 bits)" `505 
f N "spi_xfer_in" 1 486 ""
v L "stream" 1 486 "int8" `506 
v L "bits" 1 486 "int8" `510 
f G "spi_xfer_in" 1 486 "int16(int8 stream,int8 bits,int16 count)" `508 
f N "spi_xfer_in" 1 487 ""
v L "stream" 1 487 "int8" `506 
v L "bits" 1 487 "int8" `510 
f G "spi_xfer_in" 1 487 "int32(int8 stream,int8 bits,int16 count)" `508 
f N "spi_transfer" 1 488 ""
v L "wData" 1 488 "*int8" `509 
v L "rData" 1 488 "*int8" `510 
v L "count" 1 488 "int16" `511 
f B "spi_transfer" 1 488 "void(*int8 wData,*int8 rData,int16 count)" `508 
f N "spi_transfer" 1 489 ""
v L "stream" 1 489 "int8" `513 
v L "wData" 1 489 "*int8" `514 
v L "rData" 1 489 "*int8" `515 
v L "count" 1 489 "int16" `516 
f B "spi_transfer" 1 489 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `512 
f N "spi_transfer_write" 1 490 ""
v L "wData" 1 490 "*int8" `518 
v L "count" 1 490 "int16" `519 
f B "spi_transfer_write" 1 490 "void(*int8 wData,int16 count)" `517 
f N "spi_transfer_write" 1 491 ""
v L "stream" 1 491 "int8" `521 
v L "wData" 1 491 "*int8" `522 
v L "count" 1 491 "int16" `523 
f B "spi_transfer_write" 1 491 "void(int8 stream,*int8 wData,int16 count)" `520 
f N "spi_transfer_read" 1 492 ""
v L "rData" 1 492 "*int8" `525 
v L "count" 1 492 "int16" `526 
f B "spi_transfer_read" 1 492 "void(*int8 rData,int16 count)" `524 
f N "spi_transfer_read" 1 493 ""
v L "stream" 1 493 "int8" `528 
v L "rData" 1 493 "*int8" `529 
v L "count" 1 493 "int16" `530 
f B "spi_transfer_read" 1 493 "void(int8 stream,*int8 rData,int16 count)" `527  "#use rtos() Prototypes:"
f N "rtos_run" 1 496 ""
f B "rtos_run" 1 496 "void()" `531 
f N "rtos_yield" 1 497 ""
f B "rtos_yield" 1 497 "void()" `532 
f N "rtos_enable" 1 498 ""
v L "task" 1 498 "int8" `534 
f B "rtos_enable" 1 498 "void(int8 task)" `533 
f N "rtos_disable" 1 499 ""
v L "task" 1 499 "int8" `536 
f B "rtos_disable" 1 499 "void(int8 task)" `535 
f N "rtos_terminate" 1 500 ""
f B "rtos_terminate" 1 500 "void()" `537 
f N "rtos_await" 1 501 ""
v L "flag" 1 501 "int8" `539 
f B "rtos_await" 1 501 "void(int8 flag)" `538 
f N "rtos_wait" 1 502 ""
v L "sem" 1 502 "int8" `541 
f B "rtos_wait" 1 502 "void(int8 sem)" `540 
f N "rtos_signal" 1 503 ""
v L "sem" 1 503 "int8" `543 
f B "rtos_signal" 1 503 "void(int8 sem)" `542 
f N "rtos_msg_send" 1 504 ""
v L "task" 1 504 "int8" `545 
v L "msg" 1 504 "int8" `546 
f B "rtos_msg_send" 1 504 "void(int8 task,int8 msg)" `544 
f N "rtos_msg_read" 1 505 ""
f B "rtos_msg_read" 1 505 "int8()" `547 
f N "rtos_msg_poll" 1 506 ""
f B "rtos_msg_poll" 1 506 "int8()" `548 
f N "rtos_overrun" 1 507 ""
v L "task" 1 507 "int8" `550 
f B "rtos_overrun" 1 507 "int8(int8 task)" `549 
f N "rtos_stats" 1 508 ""
v L "task" 1 508 "int8" `552 
v L "stat" 1 508 "*int8" `553 
f B "rtos_stats" 1 508 "void(int8 task,*int8 stat)" `551  "#use timer() Prototypes:"
f N "get_ticks" 1 511 ""
f B "get_ticks" 1 511 "int8()" `554 
f N "get_ticks" 1 512 ""
f G "get_ticks" 1 512 "int16(int8 stream)" `555 
f N "get_ticks" 1 513 ""
f G "get_ticks" 1 513 "int32(int8 stream)" `555 
f N "get_ticks" 1 514 ""
v L "stream" 1 514 "int8" `556 
f B "get_ticks" 1 514 "int8(int8 stream)" `555 
f N "get_ticks" 1 515 ""
v L "stream" 1 515 "int8" `558 
f G "get_ticks" 1 515 "int16(int8 stream)" `557 
f N "get_ticks" 1 516 ""
v L "stream" 1 516 "int8" `558 
f G "get_ticks" 1 516 "int32(int8 stream)" `557 
f N "set_ticks" 1 517 ""
v L "value" 1 517 "int8" `558 
f B "set_ticks" 1 517 "void(int8 value)" `557 
f N "set_ticks" 1 518 ""
v L "value" 1 518 "int16" `560 
f B "set_ticks" 1 518 "void(int16 value)" `559 
f N "set_ticks" 1 519 ""
v L "value" 1 519 "int32" `562 
f B "set_ticks" 1 519 "void(int32 value)" `561 
f N "set_ticks" 1 520 ""
v L "stream" 1 520 "int8" `564 
v L "value" 1 520 "int8" `565 
f B "set_ticks" 1 520 "void(int8 stream,int8 value)" `563 
f N "set_ticks" 1 521 ""
v L "stream" 1 521 "int8" `567 
v L "value" 1 521 "int16" `568 
f B "set_ticks" 1 521 "void(int8 stream,int16 value)" `566 
f N "set_ticks" 1 522 ""
v L "stream" 1 522 "int8" `570 
v L "value" 1 522 "int32" `571 
f B "set_ticks" 1 522 "void(int8 stream,int32 value)" `569  "#use pwm() Prototypes:"
f N "pwm_on" 1 525 ""
f B "pwm_on" 1 525 "void()" `572 
f N "pwm_on" 1 526 ""
v L "stream" 1 526 "int8" `574 
f B "pwm_on" 1 526 "void(int8 stream)" `573 
f N "pwm_off" 1 527 ""
f B "pwm_off" 1 527 "void()" `575 
f N "pwm_off" 1 528 ""
v L "stream" 1 528 "int8" `577 
f B "pwm_off" 1 528 "void(int8 stream)" `576 
f N "pwm_set_duty" 1 529 ""
v L "duty" 1 529 "int16" `579 
f B "pwm_set_duty" 1 529 "void(int16 duty)" `578 
f N "pwm_set_duty" 1 530 ""
v L "stream" 1 530 "int8" `581 
v L "duty" 1 530 "int16" `582 
f B "pwm_set_duty" 1 530 "void(int8 stream,int16 duty)" `580 
f N "pwm_set_duty_percent" 1 531 ""
v L "percent" 1 531 "int16" `584 
f B "pwm_set_duty_percent" 1 531 "void(int16 percent)" `583 
f N "pwm_set_duty_percent" 1 532 ""
v L "stream" 1 532 "int8" `586 
v L "percent" 1 532 "int16" `587 
f B "pwm_set_duty_percent" 1 532 "void(int8 stream,int16 percent)" `585 
f N "pwm_set_frequency" 1 533 ""
v L "frequency" 1 533 "int32" `589 
f B "pwm_set_frequency" 1 533 "void(int32 frequency)" `588 
f N "pwm_set_frequency" 1 534 ""
v L "stream" 1 534 "int8" `591 
v L "frequency" 1 534 "int32" `592 
f B "pwm_set_frequency" 1 534 "void(int8 stream,int32 frequency)" `590  "#use capture() Prototypes:"
f N "get_capture_time" 1 537 ""
f B "get_capture_time" 1 537 "int16()" `593 
f N "get_capture_time" 1 538 ""
v L "stream" 1 538 "int8" `595 
f B "get_capture_time" 1 538 "int16(int8 stream)" `594 
f N "get_capture_event" 1 539 ""
f B "get_capture_event" 1 539 "int8()" `596 
f N "get_capture_event" 1 540 ""
v L "stream" 1 540 "int8" `598 
f B "get_capture_event" 1 540 "int8(int8 stream)" `597  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 553 ""
v L "address" 1 553 "int16" `600 
f B "goto_address" 1 553 "void(int16 address)" `599 
f N "label_address" 1 554 ""
v L "label" 1 554 "int16" `602 
f B "label_address" 1 554 "int16(int16 label)" `601  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 557 ""
v L "address" 1 557 "int16" `604 
v L "dataptr" 1 557 "*int8" `605 
v L "count" 1 557 "int16" `606 
f B "read_program_memory" 1 557 "void(int16 address,*int8 dataptr,int16 count)" `603 
f N "read_program_eeprom" 1 558 ""
v L "address" 1 558 "int16" `608 
f B "read_program_eeprom" 1 558 "int16(int16 address)" `607  "Program Memory Write Prototypes:"
f N "write_program_memory" 1 561 ""
v L "address" 1 561 "int16" `610 
v L "dataptr" 1 561 "*int8" `611 
v L "count" 1 561 "int16" `612 
f B "write_program_memory" 1 561 "void(int16 address,*int8 dataptr,int16 count)" `609 
f N "write_program_eeprom" 1 562 ""
v L "address" 1 562 "int16" `614 
v L "data" 1 562 "int16" `615 
f B "write_program_eeprom" 1 562 "void(int16 address,int16 data)" `613  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 569 "unsigned int8"
f N "read_eeprom" 1 572 ""
v L "address" 1 572 "int8" `617 
f B "read_eeprom" 1 572 "int8(int8 address)" `616 
f N "write_eeprom" 1 573 ""
v L "address" 1 573 "int8" `619 
v L "value" 1 573 "int8" `620 
f B "write_eeprom" 1 573 "void(int8 address,int8 value)" `618  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 580 ""
v L "interrupt" 1 580 "int32" `622 
f B "enable_interrupts" 1 580 "void(int32 interrupt)" `621 
f N "disable_interrupts" 1 581 ""
v L "interrupt" 1 581 "int32" `624 
f B "disable_interrupts" 1 581 "void(int32 interrupt)" `623 
f N "clear_interrupt" 1 582 ""
v L "interrupt" 1 582 "int32" `626 
f B "clear_interrupt" 1 582 "void(int32 interrupt)" `625 
f N "interrupt_active" 1 583 ""
v L "interrupt" 1 583 "int32" `628 
f B "interrupt_active" 1 583 "int8(int32 interrupt)" `627 
f N "interrupt_enabled" 1 584 ""
v L "interrupt" 1 584 "int32" `630 
f B "interrupt_enabled" 1 584 "int8(int32 interrupt)" `629 
f N "ext_int_edge" 1 585 ""
v L "source" 1 585 "int8" `632 
v L "edge" 1 585 "int8" `633 
f B "ext_int_edge" 1 585 "void(int8 source,int8 edge)" `631 
f N "jump_to_isr" 1 586 ""
v L "address" 1 586 "int16" `635 
f B "jump_to_isr" 1 586 "void(int16 address)" `634  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 588 "0x40"
d G "H_TO_L" 1 589 "0"
d G "GLOBAL" 1 591 "0x0BC0"
d G "PERIPH" 1 592 "0x0B40"
d G "INT_RTCC" 1 593 "0x000B20"
d G "INT_RB" 1 594 "0x00FF0B08"
d G "INT_EXT_L2H" 1 595 "0x50000B10"
d G "INT_EXT_H2L" 1 596 "0x60000B10"
d G "INT_EXT" 1 597 "0x000B10"
d G "INT_AD" 1 598 "0x008C40"
d G "INT_TBE" 1 599 "0x008C10"
d G "INT_RDA" 1 600 "0x008C20"
d G "INT_TIMER1" 1 601 "0x008C01"
d G "INT_TIMER2" 1 602 "0x008C02"
d G "INT_CCP1" 1 603 "0x008C04"
d G "INT_CCP2" 1 604 "0x008D01"
d G "INT_SSP" 1 605 "0x008C08"
d G "INT_BUSCOL" 1 606 "0x008D08"
d G "INT_EEPROM" 1 607 "0x008D10"
d G "INT_TIMER0" 1 608 "0x000B20"
D G "onesecond" 0 9 "1000"
F N "main" 0 11 ""
F G "main" 0 11 "void()" `642 
C L "main" 0 13 1 "FUNCTION"
C L "main" 0 13 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
